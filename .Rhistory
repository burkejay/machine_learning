x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names()
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matric
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, may_matrix2)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
rm(my_data, my_matrix, my_matrix2, my_vector)
rm(cnames, patients, vect, vect2)
x[3 5 7]
rm(x,y)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 5 != 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
quit*()
quit()
rm(ints)
swirl()
url <- "https://docs.google.com/spreadsheets/d/1zold05fMDlTaRZFIwWvTQo8ich-tx7fEbfgXMHgPrjo/pubhtml?gid=1480137217"
url <- "https://docs.google.com/spreadsheets/d/1zold05fMDlTaRZFIwWvTQo8ich-tx7fEbfgXMHgPrjo/pubhtml?gid=1480137217"
getURL(url)
library(RCurl)
getURL(url)
getURL(url)
curl -v url
getURL(url)
url <- "https://docs.google.com/spreadsheets/d/1zold05fMDlTaRZFIwWvTQo8ich-tx7fEbfgXMHgPrjo/pubhtml?gid=1480137217"
url <- "https://docs.google.com/spreadsheets/d/1zold05fMDlTaRZFIwWvTQo8ich-tx7fEbfgXMHgPrjo/pubhtml?gid=1480137217"
library(httr)
library(httpuv)
library(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("github",key="f50d86399822971ccefb",secret = "d573e4bbd19864e472861630065ea127a4d9d26et")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos",gtoken)
stop_for_status(req)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
myapp <- oauth_app("test",key="f50d86399822971ccefb",secret = "d573e4bbd19864e472861630065ea127a4d9d26et")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
req
oauth_endpoints("test")
oauth_endpoints("github")
myapp <- oauth_app("test",key="f50d86399822971ccefb",secret = "d573e4bbd19864e472861630065ea127a4d9d26et")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req
q()
f <- rep(0:1, each = 50)
f
f <- factor(f, labels= c("Group 1", "Group 2"))
f
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(ggplot2)
install.package("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("colorspace")
library(ggplot2)
qplot(votes, rating, data=movies)
qplot(votes, rating, data=movies, smooth = "loess")
qplot(votes, rating, data=movies, geom_smooth())
qplot(votes, rating, data=movies, stats_smooth("loess"))
qplot(votes, rating, data=movies, panel = panel.loess)
qplot(votes, rating, data=movies) + geom_smooth()
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
q()
t1 <- create_trajectory("parking",) %>% add_seize_event("stall", 1.0) %>% add_timeout_event("rnorm(1,20,2)") %>% add_release_event("stall", 1.0)
t1 <- create_trajectory("parking") %>% add_seize_event("stall", 1.0) %>% add_timeout_event("rnorm(1,20,2)") %>% add_release_event("stall", 1.0)
library(simmer)
t1 <- create_trajectory("parking") %>% add_seize_event("stall", 1.0) %>% add_timeout_event("rnorm(1,20,2)") %>% add_release_event("stall", 1.0)
sim <- create_simulator("parking_sim", n = 100, until = 180) %>% add_resource("stall", 20)
sim <- sim %>% add_entities_with_interval(trajectory = t1, n = 135, name_prefix = "cars", interval = "rnorm(1, 1.5, 0.5)")
sim <- sim %>% simmer()
plot_resource_usage(sim, "stall")
plot_resource_usage(sim, "stall",1)
plot_resource_utilization(sim, "stall")
t1 <- create_trajectory("parking") %>% add_seize_event("stall", 1.0) %>% add_timeout_event("rnorm(1,20,2)") %>% add_release_event("stall", 1.0)
sim <- create_simulator("parking_sim", n = 100, until = 180) %>% add_resource("stall", 20)
sim <- sim %>% add_entities_with_interval(trajectory = t1, n = 54, name_prefix = "carry_out_cars", interval = "rnorm(1, 3.3, 0.5)")
sim <- sim %>% add_entities_with_interval(trajectory = t1, n = 81, name_prefix = "eat_cars", interval = "rnorm(1, 2.2, 0.4)")
sim <- sim %>% simmer()
plot_resource_usage(sim, "stall")
plot_resource_usage(sim, "stall",1)
plot_resource_utilization(sim, "stall")
plot_evolution_entity_times(sim, type = "flow_time")
plot_evolution_entity_times(sim, type = "activity_time")
plot_resource_usage(sim, "stall",1)
plot_evolution_entity_times(sim, type = "activity_time",1)
plot_evolution_entity_times(sim, type = "activity_time")
plot_resource_usage(sim, "stall")
t2 <- get_entity_monitor_values(sim, aggregated = T)
head(t2)
t2[t2$replication=="1",]
sample(c(0,1),1)
sample(c(0,1),1)
sample(c(0,1),1)
sample(c(0,1),1)
?sample
sample(c(0,1),1, prob = c(0.1,0.9))
sample(c(0,1),1, prob = c(0.1,0.9))
sample(c(0,1),1, prob = c(0.1,0.9))
sample(c(0,1),1, prob = c(0.1,0.9))
sample(c(0,1),1, prob = c(0.1,0.9))
sample(c(0,1),1, prob = c(0.1,0.9))
sample(c(0,1),1, prob = c(0.1,0.9))
sample(c(0,1),1, prob = c(0.1,0.9))
sample(c(0,1),1, prob = c(0.1,0.9))
t1 <- create_trajectory("parking") %>% add_skip_event(number_to_skip = "sample(c(0,1),1,prob=(0.4,0.6))") %>% add_timeout_event("rnorm(1,8,1)") %>% add_timeout_event("rnorm(1,20,2)")
sim <- create_simulator("parking_sim", n = 100, until = 180) %>% add_resource("stall", 20)
sim <- sim %>% add_entities_with_interval(trajectory = t1, n = 54, name_prefix = "carry_out_cars", interval = "rnorm(1, 3.3, 0.5)")
sim <- sim %>% add_entities_with_interval(trajectory = t1, n = 54, name_prefix = "carry_out_cars", interval = "rnorm(1, 3.3, 0.5)")
q()
t1 <- create_trajectory("parking") %>% add_skip_event(number_to_skip = "sample(c(0,1),1,prob=(0.4,0.6))") %>% add_timeout_event("rnorm(1,8,1)") %>% add_timeout_event("rnorm(1,20,2)")
library(simmer)
t1 <- create_trajectory("parking") %>% add_skip_event(number_to_skip = "sample(c(0,1),1,prob=(0.4,0.6))") %>% add_timeout_event("rnorm(1,8,1)") %>% add_timeout_event("rnorm(1,20,2)")
t1 <- create_trajectory("parking") %>% add_skip_event(number_to_skip = "sample(c(0,1),1,prob=(0.4,0.6))") %>% add_timeout_event("rnorm(1,8,1)") %>% add_timeout_event("rnorm(1,20,2)")
sim <- create_simulator("parking_sim", n = 100, until = 180) %>% add_resource("stall", 20)
t1 <- create_trajectory("parking") %>% add_seize_event("stall", 1.0) %>% add_skip_event(number_to_skip = "sample(c(0,1),1,prob=(0.4,0.6))") %>% add_timeout_event("rnorm(1,8,1)") %>% add_timeout_event("rnorm(1,20,2)") %>% add_release_event("stall", 1.0)
sim <- create_simulator("parking_sim", n = 100, until = 180) %>% add_resource("stall", 20)
sim <- sim %>% add_entities_with_interval(trajectory = t1, n = 54, name_prefix = "carry_out_cars", interval = "rnorm(1, 3.3, 0.5)")
sim <- sim %>% add_entities_with_interval(trajectory = t1, n = 54, name_prefix = "carry_out_cars", interval = "1")
t1 <- create_trajectory("parking") %>% add_seize_event("stall", 1.0) %>% add_skip_event(number_to_skip = "sample(c(0,1),1)") %>% add_timeout_event("rnorm(1,8,1)") %>% add_timeout_event("rnorm(1,20,2)") %>% add_release_event("stall", 1.0)
sim <- create_simulator("parking_sim", n = 100, until = 180) %>% add_resource("stall", 20)
sim <- sim %>% add_entities_with_interval(trajectory = t1, n = 54, name_prefix = "carry_out_cars", interval = "rnorm(1, 3.3, 0.5)")
?sample
t1 <- create_trajectory("parking") %>% add_seize_event("stall", 1.0) %>% add_skip_event(number_to_skip = "sample(c(0,1),1,FALSE,c(0.4,0.6))") %>% add_timeout_event("rnorm(1,8,1)") %>% add_timeout_event("rnorm(1,20,2)") %>% add_release_event("stall", 1.0)
sim <- create_simulator("parking_sim", n = 100, until = 180) %>% add_resource("stall", 20)
sim <- sim %>% add_entities_with_interval(trajectory = t1, n = 54, name_prefix = "carry_out_cars", interval = "rnorm(1, 3.3, 0.5)")
sim <- sim %>% add_entities_with_interval(trajectory = t1, n = 81, name_prefix = "eat_cars", interval = "rnorm(1, 2.2, 0.4)")
sim <- sim %>% simmer()
plot_resource_usage(sim, "stall")
plot_resource_usage(sim, "stall",1)
plot_resource_usage(sim, "stall",10)
plot_resource_usage(sim, "stall")
plot_resource_utilization(sim,"stall")
plot_evolution_entity_times(sim, type = "flow_time")
plot_evolution_entity_times(sim, type = "activity_time")
t3 <- get_entity_monitor_values(sim, aggregated = T)
t3[t3$replication==1,]
t1 <- create_trajectory("parking") %>% add_seize_event("stall", 1.0) %>% add_skip_event(number_to_skip = "sample(c(0,1),1,FALSE,c(0.4,0.6))") %>% add_timeout_event("rnorm(1,12,1)") %>% add_timeout_event("rnorm(1,8,1)") %>% add_release_event("stall", 1.0)
sim <- create_simulator("parking_sim", n = 100, until = 180) %>% add_resource("stall", 20)
sim <- sim %>% add_entities_with_interval(trajectory = t1, n = 54, name_prefix = "carry_out_cars", interval = "rnorm(1, 3.3, 0.5)")
sim <- sim %>% add_entities_with_interval(trajectory = t1, n = 81, name_prefix = "eat_in_cars", interval = "rnorm(1, 2.2, 0.4)")
sim <- sim %>% simmer()
plot_resource_usage(sim, "stall")
t2 <- get_entity_monitor_values(sim, aggregated = T)
t2[t2$replication==1,]
plot_resource_usage(sim, "stall")
q()
rm(airquality)
rm(f)
getwd()
sessionInfo()
q()
ppois(10, lambda= 5*3)
pnorm(1, lower.tail = FALSE)
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 7.5)
ppois(14, lambda= 15)
ppois(14, lambda= 16)
ppois(16, lambda= 15)
sqrt(15)
6/32
q()
?hist
m <- rnorm(1000,5,2)
hist(m)
hist(m) + stat_function(fun = dnorm, colour = "red", size=1, args = list(mean = X))
x <- (0:10)
x
y <- pnorm(x,5,2)
y
lines(x,y,type="l",col="red")
x <- seq(-2,2,0.5)
y <- pnorm(x)
y
plot(x,y)
y <- rnorm(x)
y
plot(x,y)
hist(m)
?dnorm
dnorm(5,2)
x <- seq(0,10,length=1000)
y <- dnorm(x,mean=5,sd=2)
plot(x,y,type="l",lwd=1)
hist(m)
y1 <- y*200
line(x,y,type="l")
line(x,y)
lines(x,y,type="l")
hist(m)
curve(dnorm(x, mean=5, std=2))
curve(dnorm(x, mean=5, sd=2))
hist(m)
x <- seq(0,10,length=1000)
curve(dnorm(x, mean=5, sd=2))
h <- hist(m)
xfit<-seq(min(m),max(m),length=40)
yfit<-dnorm(xfit,mean=mean(m),sd=sd(m))
yfit <- yfit*diff(h$mids[1:2])*length(m)
lines(xfit, yfit, col="black", lwd=2)
binom.test(3,4,p=0.5,alt="greater")
binom.test(3,4,p=0.5,alt="less")
q()
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
x2 <- x - mean(x)
x2
x3 <- x2*x2
x3
w <- c(2, 1, 3, 1)
x4 <- w*x3
x4
sum(x4)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
lm(y ~ 0 + x)
data(mtcars)
mtcars.mpg
mtcars
summary(mtcars)
str(mtcars)
lm(mpg ~ wt, data = mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
sd(x)
8.58 - 9.31
-0.73/0.75
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
lm(x ~ x)
x <- c(0.18, -1.54, 0.42, 0.95)
w
mean(w*x)
w*x
x2 <- c(0.18, 0.18, -1.54, 0.42. 0.42. 0.42, 0.95)
x2 <- c(0.18, 0.18, -1.54, 0.42, 0.42, 0.42, 0.95)
mean(x2)
sum(x*w) / sum(w)
q()
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
mtcars
mtcars_fit <- lm(mpg ~ weight data=mtcars)
str(mtcars)
mtcars_fit <- lm(mpg ~ wt data=mtcars)
mtcars_fit <- lm(mpg ~ wt, data=mtcars)
summary(mtcars_fit)
sumCoef <- summary(mtcars_fit)$coef
intercept_mean <- sumCoef[1,1]
slope_mean <- sumCoef[2,1]
intercept_std_error <- sumCoef[1,2]
slope_std_error <- sumCoef[2,2]
intercept_mean + c(-1,1) * qt(0.975, df=fit$df) * intercept_std_error
slope_mean + c(-1,1) * qt(0.975, df=fit$df) * sloper_std_error
slope_mean + c(-1,1) * qt(0.975, df=fit$df) * slope_std_error
str(mtcars)
x80 <- c(0,1,2)
y80 <- c(0,1,2)
fit80 <- lm(y80 ~ x80)
summary(fit80)
x80 <- c(2,3,4)
fit80 <- lm(y80 ~ x80)
fit80 <- lm(y80 ~ x80)
summary(fit80)
mean(mtcars_wt)
mean(mtcars$wt)
q()
str(mtcars)
fit31 <- lm(mpg ~ cyl + wt)
fit31 <- lm(mpg ~ cyl + wt, data=mtcars)
summary(fit31)
fit32 <- lm(mpg ~ cyl, data=mtcars)
summary(fit32)
fit33 <- lm(mpg ~ cyl*wt, data=mtcars)
summary(fit33)
fit331 <- lm(mpg ~ cyl + wt, data=mtcars)
fit332 <- update(fit331, cyl*wt, data=mtcars)
fit332 <- update(fit, cyl*wt, data=mtcars)
fit332 <- update(fit331, cyl*wt, data=mtcars)
fit 34 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit34 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit34)
35x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
x35 <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y35 <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit35 <- lm(y35 ~ x35)
lm.influence(fit35)
x36 <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y36 <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit36 <- lm(y36 ~ x36)
dfbetas(fit36)
summary(fit36)
?update
fit332 <- update(fit331, cyl*wt, data=mtcars)
fit332 <- update(fit331, cyl:wt, data=mtcars)
fit332 <- update(fit331, mtcars$cyl*mtcars$wt, data=mtcars)
fit332 <- update(fit331, mtcars$cyl*mtcars$wt)
fit332 <- lm(mpg ~ cyl*wt, data=mtcars)
anova(fit331, fit332)
fit331 <- lm(mpg ~ factor(cyl) + wt, data=mtcars)
summary(fit331)
fit332 <- lm(mpg ~ factor(cyl)*wt, data=mtcars)
summary(fit332)
anova(fit331, fit332)
?mtcars
str(mtcars)
cars_fit <- lm(mpg ~ cyl, data=mtcars)
confint(cars_fit)
cars_fit <- lm(mpg ~ am, data=mtcars)
confint(cars_fit)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
coplot(mpg ~ am | as.factor(am), data = mtcars,panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
plot(cars_fit)
par(mfrow = c(4,1))
plot(cars_fit)
par(mfrow = c(2,2))
plot(cars_fit)
par(mfrow = c(1,4))
plot(cars_fit)
cars_fit <- lm(mpg ~ am*wt, data=mtcars)
aummary(cars_fit)
summary(cars_fit)
q()
library(MASS)
str(shuttle)
logRegUse <- glm(use,wind,family="binomial",data=shuttle)
logRegUse <- glm(use ~ wind,family="binomial",data=shuttle)
logRegUse
summary(logRegUse)
exp(-0.03181)
1 - exp(-0.03181)/exp(-0.03181)
(1 - exp(-0.03181))/exp(-0.03181)
logRegUse2 <- glm(use ~ wind + magn,family="binomial",data=shuttle)
summary(logRegUse2)
exp(-0.03201)
exp(logRegUse$coeff)
1 - exp(logRegUse$coeff)
exp(logRegUse2$coeff)
1-exp(logRegUse2$coeff)
logRegUse3 <- glm(1-use ~ wind,family="binomial",data=shuttle)
asNumber(shuttle$use)
asNumbers(shuttle$use)
str(shuttle)
logRegUse3 <- glm(1-as.numeric(use) ~ wind,family="binomial",data=shuttle)
?InsectSprays
str(InsectSprays)
PoiRegIS <- glm(spray ~ count, family="poisson", data=InsectSprays)
PoiRegIS <- glm(count ~ spray, family="poisson", data=InsectSprays)
PoiRegIS <- glm(spray, family="poisson", data=InsectSprays)
PoiRegIS <- glm(count ~ spray, family="poisson", data=InsectSprays)
summary(PoiRegIS)
e(0.05588)
exp(0.05588)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
x <- 0:5
y <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97))
y <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lm(y ~ x)
logRegUse3 <- glm(1-as.numeric(use) ~ wind,family="binomial",data=shuttle)
q3 <- 1-as.numeric(use)
q3 <- 1-as.numeric(shutte$use)
q3 <- 1-as.numeric(shuttle$use)
q3
as.numeric(shuttle$use)
str(shuttle)
summary(logRegUse2)
summary(logRegUse)
?relevel
logRegUse <- glm(use ~ wind,family="binomial",data=shuttle)
summary(logRegUse)
str(shuttle)
shuttle$use
logRegUse <- glm(use ~ wind,family="binomial",data=shuttle)
summary(logRegUse)
as.numeric(shuttle$use)
if(shuttle$use == "auto") shuttle$inv == "notauto" else shuttle$inv == "auto"
rep(2,128)
c(rep(2,128),rep(1,128))
shuttle$inv <- c(rep(2,128),rep(1,128))
logRegUse <- glm(inv ~ wind,family="binomial",data=shuttle)
relevel(shuttle$use,shuttle.auto)
relevel(shuttle$use,auto)
relevel(shuttle$use,"auto")
relevel(shuttle$use,"noauto")
shuttle$inv <- relevel(shuttle$use,"noauto")
str(shuttle)
logRegUse <- glm(inv ~ wind,family="binomial",data=shuttle)
summary(logRegUse)
logRegUseInv <- glm(inv ~ wind,family="binomial",data=shuttle)
logRegUse <- glm(use ~ wind,family="binomial",data=shuttle)
summary(logRegUse)
summary(logRegUseInv)
insectSprays
str(InsectSprays)
austres
str(austres)
austres$time <- 1:89
str(austres)
str(austres)
rm(austres$time)
plot(austres$time,austres$Time-Series)
plot(austres$time,austres$TimeSeries)
plot(austres$TimeSeries)
str(austres)
rm(austres)
str(austres)
austres
plot(austres)
str(austres)
rowNames(austres)
rowName(austres)
x5 <- 1:10000
count <- x5*x5/1000
plot(x5,count)
x5 <- c(rep(0,5000),rep(1,5000))
plot(x5,count)
glm(count ~ x5, family="poisson")
glm(count ~ x5, offset=log(count), family="poisson")
e(-2.572e-18)
exp(-2.572e-18)
sum(count)
glm(count ~ x5, offset=log(sum(count)), family="poisson")
glm(count ~ x5, offset=log(count), family="poisson")
glm(count ~ x5, offset=log(x5), family="poisson")
t2 <- log(10) + count
glm(count ~ x5, offset=log(t2), family="poisson")
q()
getwd()
setWd("R")
setwd("R")
setwd("machine_learning")
